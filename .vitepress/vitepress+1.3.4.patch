diff --git a/node_modules/vitepress/dist/node/serve-CFRRJDfQ.js b/node_modules/vitepress/dist/node/serve-CFRRJDfQ.js
index cea6898..1e664d1 100644
--- a/node_modules/vitepress/dist/node/serve-CFRRJDfQ.js
+++ b/node_modules/vitepress/dist/node/serve-CFRRJDfQ.js
@@ -34354,6 +34354,142 @@ var patterns = options => {
         // remove <p>{.c}</p>
         tokens.splice(i + 1, 3);
       }
+    }, {
+      /**
+       * | A | B |
+       * | -- | -- |
+       * | 1 | 2 |
+       *
+       * | C | D |
+       * | -- | -- |
+       *
+       * only `| A | B |` sets the colsnum metadata
+       */
+      name: 'tables thead metadata',
+      tests: [
+        {
+          shift: 0,
+          type: 'tr_close',
+        }, {
+          shift: 1,
+          type: 'thead_close'
+        }, {
+          shift: 2,
+          type: 'tbody_open'
+        }
+      ],
+      transform: (tokens, i) => {
+        const tr = utils$1.getMatchingOpeningToken(tokens, i);
+        const th = tokens[i - 1];
+        let colsnum = 0;
+        let n = i;
+        while (--n) {
+          if (tokens[n] === tr) {
+            tokens[n - 1].meta = Object.assign({}, tokens[n + 2].meta, { colsnum });
+            break;
+          }
+          colsnum += (tokens[n].level === th.level && tokens[n].type === th.type) >> 0;
+        }
+        tokens[i + 2].meta = Object.assign({}, tokens[i + 2].meta, { colsnum });
+      }
+    }, {
+      /**
+       * | A | B | C | D |
+       * | -- | -- | -- | -- |
+       * | 1 | 11 | 111 | 1111 {rowspan=3} |
+       * | 2 {colspan=2 rowspan=2} | 22 | 222 | 2222 |
+       * | 3 | 33 | 333 | 3333 |
+       */
+      name: 'tables tbody calculate',
+      tests: [
+        {
+          shift: 0,
+          type: 'tbody_close',
+          hidden: false
+        }
+      ],
+      /**
+       * @param {number} i index of the tbody ending
+       */
+      transform: (tokens, i) => {
+        /** index of the tbody beginning */
+        let idx = i - 2;
+        while (idx > 0 && 'tbody_open' !== tokens[--idx].type);
+
+        const calc = tokens[idx].meta.colsnum >> 0;
+        if (calc < 2) { return; }
+
+        const level = tokens[i].level + 2;
+        for (let n = idx; n < i; n++) {
+          if (tokens[n].level > level) { continue; }
+
+          const token = tokens[n];
+          const rows = token.hidden ? 0 : token.attrGet('rowspan') >> 0;
+          const cols = token.hidden ? 0 : token.attrGet('colspan') >> 0;
+
+          if (rows > 1) {
+            let colsnum = calc - (cols > 0 ? cols : 1);
+            for (let k = n, num = rows; k < i, num > 1; k++) {
+              if ('tr_open' == tokens[k].type) {
+                tokens[k].meta = Object.assign({}, tokens[k].meta);
+                if (tokens[k].meta && tokens[k].meta.colsnum) {
+                  colsnum -= 1;
+                }
+                tokens[k].meta.colsnum = colsnum;
+                num--;
+              }
+            }
+          }
+
+          if ('tr_open' == token.type && token.meta && token.meta.colsnum) {
+            const max = token.meta.colsnum;
+            for (let k = n, num = 0; k < i; k++) {
+              if ('td_open' == tokens[k].type) {
+                num += 1;
+              } else if ('tr_close' == tokens[k].type) {
+                break;
+              }
+              num > max && (tokens[k].hidden || hidden$1(tokens[k]));
+            }
+          }
+
+          if (cols > 1) {
+            /** @type {number[]} index of one row's children */
+            const one = [];
+            /** last index of the row's children */
+            let end = n + 3;
+            /** number of the row's children */
+            let num = calc;
+
+            for (let k = n; k > idx; k--) {
+              if ('tr_open' == tokens[k].type) {
+                num = tokens[k].meta && tokens[k].meta.colsnum || num;
+                break;
+              } else if ('td_open' === tokens[k].type) {
+                one.unshift(k);
+              }
+            }
+
+            for (let k = n + 2; k < i; k++) {
+              if ('tr_close' == tokens[k].type) {
+                end = k;
+                break;
+              } else if ('td_open' == tokens[k].type) {
+                one.push(k);
+              }
+            }
+
+            const off = one.indexOf(n);
+            let real = num - off;
+            real = real > cols ? cols : real;
+            cols > real && token.attrSet('colspan', real + '');
+
+            for (let k = one.slice(num + 1 - calc - real)[0]; k < end; k++) {
+              tokens[k].hidden || hidden$1(tokens[k]);
+            }
+          }
+        }
+      }
     }, {
       /**
        * *emphasis*{.with attrs=1}
@@ -34591,6 +34727,22 @@ function last$1(arr) {
   return arr.slice(-1)[0];
 }
 
+/**
+ * Hidden table's cells and them inline children,
+ * specially cast inline's content as empty
+ * to prevent that escapes the table's box model
+ * @see https://github.com/markdown-it/markdown-it/issues/639
+ * @param {import('.').Token} token
+ */
+function hidden$1(token) {
+  token.hidden = true;
+  token.children && token.children.forEach(t => (
+    t.content = '',
+    hidden$1(t),
+    undefined
+  ));
+}
+
 const patternsConfig = patterns;
 
 const defaultOptions = {
@@ -37123,16 +37275,17 @@ function createContainer(klass, defaultTitle, md) {
     {
       render(tokens, idx, _options, env) {
         const token = tokens[idx];
-        const info = token.info.trim().slice(klass.length).trim();
-        const attrs = md.renderer.renderAttrs(token);
         if (token.nesting === 1) {
+          token.attrJoin("class", `${klass} custom-block`);
+          const attrs = md.renderer.renderAttrs(token);
+          const info = token.info.trim().slice(klass.length).trim();
           const title = md.renderInline(info || defaultTitle, {
             references: env.references
           });
           if (klass === "details")
-            return `<details class="${klass} custom-block"${attrs}><summary>${title}</summary>
+            return `<details ${attrs}><summary>${title}</summary>
 `;
-          return `<div class="${klass} custom-block"${attrs}><p class="custom-block-title">${title}</p>
+          return `<div ${attrs}><p class="custom-block-title">${title}</p>
 `;
         } else return klass === "details" ? `</details>
 ` : `</div>
@@ -37668,8 +37821,12 @@ const createMarkdownRenderer = async (srcDir, options = {}, base = "/", logger =
     { target: "_blank", rel: "noreferrer", ...options.externalLinks },
     base
   ).use(lineNumberPlugin, options.lineNumbers);
+  const orgi = md.renderer.rules.table_open;
   md.renderer.rules.table_open = function(tokens, idx, options2, env, self) {
-    return '<table tabindex="0">\n';
+    tokens[idx].attrGet("tabindex") ?? tokens[idx].attrJoin("tabindex", "0");
+    return orgi
+      ? orgi(tokens, idx, options2, env, self)
+      : self.renderToken(tokens, idx, options2);
   };
   if (options.gfmAlerts !== false) {
     md.use(gitHubAlertsPlugin);
